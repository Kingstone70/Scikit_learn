{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scikit Learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import sklearn as sk\n",
    "import seaborn as sns\n",
    "from sklearn import model_selection\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.svm import SVC\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load the dataset and do EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepallength</th>\n",
       "      <th>sepalwidth</th>\n",
       "      <th>petallength</th>\n",
       "      <th>petalwidth</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepallength  sepalwidth  petallength  petalwidth        class\n",
       "0          5.1         3.5          1.4         0.2  Iris-setosa\n",
       "1          4.9         3.0          1.4         0.2  Iris-setosa\n",
       "2          4.7         3.2          1.3         0.2  Iris-setosa\n",
       "3          4.6         3.1          1.5         0.2  Iris-setosa\n",
       "4          5.0         3.6          1.4         0.2  Iris-setosa"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris = pd.read_csv(r\"C:\\Users\\wilson.adejo\\Desktop\\iris.csv\")\n",
    "iris.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepallength</th>\n",
       "      <th>sepalwidth</th>\n",
       "      <th>petallength</th>\n",
       "      <th>petalwidth</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     sepallength  sepalwidth  petallength  petalwidth           class\n",
       "145          6.7         3.0          5.2         2.3  Iris-virginica\n",
       "146          6.3         2.5          5.0         1.9  Iris-virginica\n",
       "147          6.5         3.0          5.2         2.0  Iris-virginica\n",
       "148          6.2         3.4          5.4         2.3  Iris-virginica\n",
       "149          5.9         3.0          5.1         1.8  Iris-virginica"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150, 5)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.shape   # use for finding the number of rows and columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sepallength    0\n",
       "sepalwidth     0\n",
       "petallength    0\n",
       "petalwidth     0\n",
       "class          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.sample()\n",
    "iris.isnull()\n",
    "iris.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150 entries, 0 to 149\n",
      "Data columns (total 5 columns):\n",
      "sepallength    150 non-null float64\n",
      "sepalwidth     150 non-null float64\n",
      "petallength    150 non-null float64\n",
      "petalwidth     150 non-null float64\n",
      "class          150 non-null object\n",
      "dtypes: float64(4), object(1)\n",
      "memory usage: 5.9+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepallength</th>\n",
       "      <th>sepalwidth</th>\n",
       "      <th>petallength</th>\n",
       "      <th>petalwidth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.843333</td>\n",
       "      <td>3.054000</td>\n",
       "      <td>3.758667</td>\n",
       "      <td>1.198667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.828066</td>\n",
       "      <td>0.433594</td>\n",
       "      <td>1.764420</td>\n",
       "      <td>0.763161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.300000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5.100000</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.800000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.350000</td>\n",
       "      <td>1.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.400000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.900000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       sepallength  sepalwidth  petallength  petalwidth\n",
       "count   150.000000  150.000000   150.000000  150.000000\n",
       "mean      5.843333    3.054000     3.758667    1.198667\n",
       "std       0.828066    0.433594     1.764420    0.763161\n",
       "min       4.300000    2.000000     1.000000    0.100000\n",
       "25%       5.100000    2.800000     1.600000    0.300000\n",
       "50%       5.800000    3.000000     4.350000    1.300000\n",
       "75%       6.400000    3.300000     5.100000    1.800000\n",
       "max       7.900000    4.400000     6.900000    2.500000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.info()\n",
    "iris.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualisation of  dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "iris.hist()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1bf52c877f0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "iris.boxplot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\wilson.adejo\\Documents\\Python\\lib\\site-packages\\seaborn\\axisgrid.py:230: UserWarning: The `size` paramter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(msg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1bf52cf94a8>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 463.5x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#This can only be used for two attributes at a time\n",
    "sns.FacetGrid(iris,hue=\"class\", size=5)\\\n",
    ".map(plt.scatter,\"sepallength\",\"petalwidth\")\\\n",
    ".add_legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 16 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# scatter plot matrix\n",
    "#from pandas.tools.plotting import scatter_matrix or use\n",
    "from pandas.plotting import scatter_matrix\n",
    "scatter_matrix(iris)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Separate the dataset into Features  and Label( Target) i.e dependent and independent variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   sepalwidth  petallength  petalwidth\n",
      "0         3.5          1.4         0.2\n",
      "1         3.0          1.4         0.2\n",
      "2         3.2          1.3         0.2\n",
      "3         3.1          1.5         0.2\n",
      "4         3.6          1.4         0.2\n",
      "0    Iris-setosa\n",
      "1    Iris-setosa\n",
      "2    Iris-setosa\n",
      "3    Iris-setosa\n",
      "4    Iris-setosa\n",
      "Name: class, dtype: object\n"
     ]
    }
   ],
   "source": [
    "x = iris.iloc[:,1:4]\n",
    "y =iris.iloc[ :,4]\n",
    "print(x.head())\n",
    "print(y.head())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Split the dataset into training and  test sets\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split-out validation dataset, testsize is the nos of test dat to use and random state \n",
    "# 65% of which we will use to train our models and 35% that we will hold back as a test dataset\n",
    "#sklearn train test split is used to split the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "114     Iris-virginica\n",
      "62     Iris-versicolor\n",
      "33         Iris-setosa\n",
      "107     Iris-virginica\n",
      "7          Iris-setosa\n",
      "100     Iris-virginica\n",
      "40         Iris-setosa\n",
      "86     Iris-versicolor\n",
      "76     Iris-versicolor\n",
      "71     Iris-versicolor\n",
      "Name: class, dtype: object\n"
     ]
    }
   ],
   "source": [
    "x_train, x_test, y_train, y_test = model_selection.train_test_split(x, y, test_size=.35, random_state=0)\n",
    "\n",
    "#check the spliting of the dataset for correctness\n",
    "x_train\n",
    "y_train\n",
    "x_test\n",
    "y_test\n",
    "print(y_test.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train and test the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9433962264150944"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf=GaussianNB()\n",
    "dt_train=clf.fit(x_train,y_train)\n",
    "dt_train\n",
    "\n",
    "#Testing the model\n",
    "# note the difference btw using using .predict (that is used in just predicted class) and .score which \n",
    "# is used in getting the %accuracy and compare the prediction to the actual y_test\n",
    "dt_train.predict(x_test)\n",
    "dt_train.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Support Vector Machine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\wilson.adejo\\Documents\\Python\\lib\\site-packages\\sklearn\\svm\\base.py:196: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n",
       "  decision_function_shape='ovr', degree=3, gamma='auto_deprecated',\n",
       "  kernel='rbf', max_iter=-1, probability=False, random_state=None,\n",
       "  shrinking=True, tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Training and fitting the model\n",
    "from sklearn.svm  import SVC\n",
    "#clf2=SVC()\n",
    "#sv_train=clf2.fit(x_train, y_train)\n",
    "#sv_train\n",
    "\n",
    "## orsimply use\n",
    "sv_train=SVC().fit(x_train,y_train)\n",
    "sv_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9811320754716981"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Model the test data\n",
    "sv_train.predict(x_test)\n",
    "sv_train.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\wilson.adejo\\Documents\\Python\\lib\\site-packages\\sklearn\\ensemble\\forest.py:246: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=None,\n",
       "            oob_score=False, random_state=None, verbose=0,\n",
       "            warm_start=False)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Training and fitting\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf_train=RandomForestClassifier().fit(x_train,y_train)\n",
    "rf_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9622641509433962"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Modelling the dataset\n",
    "rf_train.predict(x_test)\n",
    "rf_train.score(x_test,y_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regresion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='multinomial',\n",
       "          n_jobs=None, penalty='l2', random_state=0, solver='lbfgs',\n",
       "          tol=0.0001, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train  the iris using multinomial logistic regression because of more than two labels/targets\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "mul_lr=LogisticRegression(random_state=0, solver='lbfgs',multi_class='multinomial').fit(x_train, y_train)\n",
    "mul_lr "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9811320754716981"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Modelling the test set\n",
    "mul_pred=mul_lr.predict(x_test)\n",
    "mul_pred\n",
    "mul_score=mul_lr.score(x_test,y_test)\n",
    "mul_score   # Note-score is thesame as mean accuracy on the given test data and labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# X-Gboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBClassifier(alpha=10, base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "       colsample_bynode=1, colsample_bytree=0.3, gamma=0,\n",
       "       learning_rate=0.1, max_delta_step=0, max_depth=5,\n",
       "       min_child_weight=1, missing=None, n_estimators=10, n_jobs=1,\n",
       "       nthread=None, objective='multi:softprob', random_state=0,\n",
       "       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n",
       "       silent=None, subsample=1, verbosity=1)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Training and Fitting\n",
    "import xgboost as xgb\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "#NOTE\n",
    "#The next step is to instantiate an XGBoost regressor object by calling the XGBRegressor() class from the \n",
    "# XGBoost library with the hyper-parameters passed as arguments. For classification problems, \n",
    "#you would have used the XGBClassifier() class.\n",
    "\n",
    "xg_reg = xgb.XGBClassifier(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n",
    "                max_depth = 5, alpha = 10, n_estimators = 10)\n",
    "\n",
    "xg_train=xg_reg.fit(x_train,y_train)  \n",
    "xg_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Iris-virginica' 'Iris-versicolor' 'Iris-setosa' 'Iris-virginica'\n",
      " 'Iris-setosa' 'Iris-virginica' 'Iris-setosa' 'Iris-versicolor'\n",
      " 'Iris-versicolor' 'Iris-versicolor' 'Iris-virginica' 'Iris-versicolor'\n",
      " 'Iris-versicolor' 'Iris-versicolor' 'Iris-versicolor' 'Iris-setosa'\n",
      " 'Iris-versicolor' 'Iris-versicolor' 'Iris-setosa' 'Iris-setosa'\n",
      " 'Iris-virginica' 'Iris-versicolor' 'Iris-setosa' 'Iris-setosa'\n",
      " 'Iris-virginica' 'Iris-setosa' 'Iris-setosa' 'Iris-versicolor'\n",
      " 'Iris-versicolor' 'Iris-setosa' 'Iris-virginica' 'Iris-versicolor'\n",
      " 'Iris-setosa' 'Iris-virginica' 'Iris-virginica' 'Iris-versicolor'\n",
      " 'Iris-setosa' 'Iris-virginica' 'Iris-versicolor' 'Iris-versicolor'\n",
      " 'Iris-virginica' 'Iris-setosa' 'Iris-virginica' 'Iris-setosa'\n",
      " 'Iris-setosa' 'Iris-versicolor' 'Iris-virginica' 'Iris-virginica'\n",
      " 'Iris-versicolor' 'Iris-virginica' 'Iris-versicolor' 'Iris-virginica'\n",
      " 'Iris-versicolor']\n",
      "0.9622641509433962\n"
     ]
    }
   ],
   "source": [
    "#Modelling the test data\n",
    "xg_train.predict(x_test)\n",
    "xg_train.score(x_test,y_test)\n",
    "\n",
    "# assign the model to name\n",
    "xg_pred=xg_train.predict(x_test)\n",
    "xg_score=xg_train.score(x_test,y_test)\n",
    "print(xg_pred)\n",
    "print(xg_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9622641509433962\n",
      "Accuracy: 96.23%\n"
     ]
    }
   ],
   "source": [
    "# This is another method of doing accuracy apart fro using .score functions above\n",
    "accuracy = accuracy_score(y_test, xg_pred)\n",
    "print(accuracy)\n",
    "accuracy = accuracy_score(y_test, xg_pred)\n",
    "print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[16  0  0]\n",
      " [ 0 20  1]\n",
      " [ 0  1 15]]\n"
     ]
    }
   ],
   "source": [
    "#Confusion Matrix\n",
    "from sklearn.metrics import confusion_matrix\n",
    "confusion = confusion_matrix(y_test, xg_pred)\n",
    "print(confusion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 precision    recall  f1-score   support\n",
      "\n",
      "    Iris-setosa       1.00      1.00      1.00        16\n",
      "Iris-versicolor       0.95      0.95      0.95        21\n",
      " Iris-virginica       0.94      0.94      0.94        16\n",
      "\n",
      "      micro avg       0.96      0.96      0.96        53\n",
      "      macro avg       0.96      0.96      0.96        53\n",
      "   weighted avg       0.96      0.96      0.96        53\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Classification report\n",
    "from sklearn.metrics import classification_report\n",
    "report = classification_report(y_test, xg_pred)\n",
    "print(report)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=None, n_neighbors=10, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "neigh = KNeighborsClassifier\n",
    "clf = neigh(n_neighbors = 10)\n",
    "knn_clf=clf.fit(x_train, y_train)\n",
    "knn_clf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Iris-virginica' 'Iris-versicolor' 'Iris-setosa' 'Iris-virginica'\n",
      " 'Iris-setosa' 'Iris-virginica' 'Iris-setosa' 'Iris-versicolor'\n",
      " 'Iris-versicolor' 'Iris-versicolor' 'Iris-virginica' 'Iris-versicolor'\n",
      " 'Iris-versicolor' 'Iris-versicolor' 'Iris-versicolor' 'Iris-setosa'\n",
      " 'Iris-versicolor' 'Iris-versicolor' 'Iris-setosa' 'Iris-setosa'\n",
      " 'Iris-virginica' 'Iris-versicolor' 'Iris-setosa' 'Iris-setosa'\n",
      " 'Iris-virginica' 'Iris-setosa' 'Iris-setosa' 'Iris-versicolor'\n",
      " 'Iris-versicolor' 'Iris-setosa' 'Iris-virginica' 'Iris-versicolor'\n",
      " 'Iris-setosa' 'Iris-virginica' 'Iris-virginica' 'Iris-versicolor'\n",
      " 'Iris-setosa' 'Iris-virginica' 'Iris-versicolor' 'Iris-versicolor'\n",
      " 'Iris-virginica' 'Iris-setosa' 'Iris-virginica' 'Iris-setosa'\n",
      " 'Iris-setosa' 'Iris-versicolor' 'Iris-virginica' 'Iris-virginica'\n",
      " 'Iris-virginica' 'Iris-virginica' 'Iris-versicolor' 'Iris-virginica'\n",
      " 'Iris-versicolor']\n",
      "0.9811320754716981\n"
     ]
    }
   ],
   "source": [
    "knn_clf.predict(x_test)\n",
    "knn_clf.score(x_test,y_test)\n",
    "knn_pred=knn_clf.predict(x_test)\n",
    "knn_score=knn_clf.score(x_test,y_test)\n",
    "print(knn_pred)\n",
    "print(knn_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 98.11%\n"
     ]
    }
   ],
   "source": [
    "accuracy = accuracy_score(y_test, knn_pred)\n",
    "print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
